*Main points
- agentstate logic for each state
- edge cases when transitioning between states
- is clonedstate necessary? no, goalstste will suffice
- bombs should be goals...
- terrain logic, think about it
- floodfill to find rafts, no seen rafts, messy
- what is an obstruction and what isnt, and when?
- proper graph for map

WATER TRAVEL 
*When is it OK to travel on water? or go to water?
- only when agent has a raft
*When is it not OK to travel on water?
- when no raft
- when in land explore mode
*When is it NOT OK to cross from water onto land?
- when in water explore mode
---crossing land when on water should lead to dead end in A* state search as cant continue...

STATE LOGIC 
*land explore (starts out on land)
-go into explore function, if it returns actions, follow them
-failing the above, if there is a goal go into goal pursuit, failing that if has axe go into water explore
*water explore (starts out on water)
-as above essentiall, except if there is unexplored land, go there
*goal pursuit
-pursue a goal if there is one, if that results in actions do them
-if there's no goal or no actions from the only goal there, see if fetching a raft will help 
(enqueu that goal and return without change state - while loop)
-if still nothing, go to other states

STATE TRANSITIONS
*Land explore -> water explore
- if no raft, first get raft before transitioning to water explore
- do not transition if raft not able to be collected
*Water explore -> land explore
- if not already on land, go to nearest unexplored land before transition (floodfill)
- if not land reached, do not change state
*Goal pursuit
- always favour pursuing a goal over exploring, if there's a goal, go for it

TREES
- trees are not to be cleared on land exploration
- trees are to be cleared in a path to unexplored land, or to goal, ONLY (boolean toggle in state?)

LAND EXPLORE STATE
- explore all immediately reachable land, collecting items and going through doors if needed. DO NOT power through trees
- if there remains reachable unexplored land, go there and continue, THROUGH TREES TO GET THERE IF NEED be
- if all land explored and none left that can be reached, transition:
1. go into goal pursuit if there exists a goal
2. go into water exploration is there exists reachable unexplored water (and then only if a raft grabbable)

WATER EXPLORE STATE
- simply explore all reachable water that does not require crossing land, strict water-only state
- if no more water left, transition:
1. go into goal pursuit if there exists a goal
2. go to land if there exists reachable unexplored land S

GOAL PURSUIT STATE
- if there is a goal, deque it, and pursue it
- if goal not reachable or no goal available, transition:
1. go to land if there exists reachable unexplored land
2. go into water exploration is there exists reachable unexplored water (and then only if a raft grabbable)

GoalState
- track raft, key, bombs, onwater
- use instead of cloning state (above will suffice for terrain mgmt)

floodfill
- used to return reachable land, water, rafts in lieu of "seen item" lists
- alternative implementation for counting reachable items...

OBSTRUCTIONS ETC
-k,a,d,$: all items, collectible
-T: not to be cleared when exploring land, except when going to new unexplored region and way needs to be cleared (change state to goal? will fall abck to land first)
 but trees clearable during goal pursuit (handled in GoalState - slightly higher path cost)

BOMB GOALS 
- want add bombs as goals but not add multiple, when it is reached we want to floodfill to find nearest...
- OR we add them and when one is selected, find the nearest

TERRAIN 
-all terrain changes occur with state changes, or collecting of rafts, or on stepping off water

STEPS
1. get graph working (DONE!)
2. floodfill find reachable items (DONE!)
3. state transitions (DONE! i think...)
4. obstructions and terrain mngr (DONEish)
5. goal state and search logic, dont need heuristics, clean up path logic.... (DONEish)
6. add item scoring to astar f value calculations (separate function)

TODO
1. bomb goal logic...
2. configure goalmngr for all goals
3. reevaluate astar logic...
4. goals even needed??

CURRENT ISSUES
-current problem with astar is it reaches the next node with no bombs....
(subtracting numBombs fixes this but it blasts nonoptimal wall...)
    -why does this happen?
    -only if getting there without a bomb has a lower f-score than not using it...
    -making bombs WAY more expensive works.... consider where a blasting is a massive shortcut and more expensive to go around


-need good bomb logic to choose best bomb!! prototype in place for closest... think!!!!!!!!!!!!!!!!
-need to make reachability more complicated (not visited for terrain...) seems ok, montior
-goes straight for bombs in s7 and gets stuck without a raft... could sue a bomb but doesnt... wastes one anyway...
-need a way of determining whether the agent will get stuck...
    OR
do astar using various heuristics and score them based on resultant states? deos that make sense?
-dont pursue a goal when on water... going to land part of transition??

-need to think about CHAINS of goals rather than goals themselves, YOU CAN GET A GOAL IN A WAY THAT MAKES ANOTHER GOAL OBTAINABLE
- so not merely lowest cost path but optimal goal-seeking path.... function to score walls blown away??

-dijkstra (or prims) shortest path BETWEEN GOALS with heuristics h1, h2, ... ,hn and the heuristic is the sum of these, where 
if any are collected that h_i remains zero. Then if removing an obstacle along one of those paths reduces the cost along that
path it is preferenced?? Or nodes laong that apth have lower cost.... algo assumes X bombs at the start...

HOW CAN THIS BE DONE?

-this logic applies mostly to s8 & s9. It concerns collecting bombs and choosing walls to blast while pursuing more bombs
which eventually lead to the treasure. 
-it needs to lead from bombs to the treasure, inclusive. 
-to be compatible with other levels, this needs to kick in with a condition imposed by these levels (multiple bombs are head of the 
queue?)
-may need to update gamenode logic to account for mutable goal weights, add method for retrieving (in progress)

so

-when bomb(s) are the head of the queue we want to decide the best way of pursuing them en route to the treasure
-analyse the bomb goals to find an optimal path between them, then recalc nodes weights on this path to make them attractive

THIS BOMB LOGIC IS WHAT IS STANDING BETWEEN ME AND SUCCESS!!!! - also getting the goal on s7 from water...

-could this be done with astar and a new heuristic?

s7 ISSUES - goal state logic
-gets stuck be cause it doesnt explore the land portion first
-so dont be greedy, explore all land first before explore all alnd first nefore goals (water->land->goal)
-SOLVED s7 BY CHANGING WATER EXPLORE LOGIC BUT FUCKS s4, s6 so must determine if gets STUCK!!!!!!!
-determine the logic behind getting stuck....

*BOMB LOGIC OVERVIEW
use astar/dijkstra to find optimal path (BACKWARDS?) from treasure to all clustered bombs. Once this path is calculated
then the cost of each node along the path is set to 0.

This kicks in when the only goals left in the queue and bombs and teasure. This will only happen on s7-s9. It may happen on s6,s4 too
but that shouldnt cause a problem. 

THINK ABOUT STATES 

*WATER EXPLORE
-entering water explore we need a raft - DONE
-leaving water explore we go not want to pursue a goal if there is new revealed land to explore....
MUST not be a dead zone, and must not create a dead zone

*GOAL PURSUIT
-want to go to land first, but land NEAR THE GOAL

OK SO IT WINS FIRST 7!!!!!!!!!!

need to think about bomb logic.....

problems:
-dont want to make an optimal path with bombs are separated by a large distance?? how to partition them?
-have made astar logic different... can hopefully reuse this code.... will see if it does the trick
-init this when only bombs and treasure are left....

BOMB LOGIC AGAIN

-when all that's left is bomb goals and the treasure, we activate the logic
-order bombs in decreasing distance from the treasure
-working backwards from the tresure we A* down the ordered list finding the optimal path from the treasure to
the bombs (ignore all bombs greater than a distance of 4)

ITS WINING 8 AND 9!!!!!!!!!!!! POC WORKS!! - increased wall weights
-fails 6 and 7 though, as goal path is null in optimalPath (no raft, no key?, haphazard logic?)
-HARD PART IS OVER JUST UPDATE LOGIC
-and fix bomb++ hack
